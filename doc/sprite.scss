/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$level-name: 'level';
$level-x: 2.26rem;
$level-y: 0.42rem;
$level-offset-x: -2.26rem;
$level-offset-y: -0.42rem;
$level-width: 0.33rem;
$level-height: 0.27rem;
$level-total-width: 2.68rem;
$level-total-height: 2.04rem;
$level-image: '../../../sprite.png';
$level: (2.26rem, 0.42rem, -2.26rem, -0.42rem, 0.33rem, 0.27rem, 2.68rem, 2.04rem, '../../../sprite.png', 'level', );
$money-name: 'money';
$money-x: 2.26rem;
$money-y: 0rem;
$money-offset-x: -2.26rem;
$money-offset-y: 0rem;
$money-width: 0.42rem;
$money-height: 0.42rem;
$money-total-width: 2.68rem;
$money-total-height: 2.04rem;
$money-image: '../../../sprite.png';
$money: (2.26rem, 0rem, -2.26rem, 0rem, 0.42rem, 0.42rem, 2.68rem, 2.04rem, '../../../sprite.png', 'money', );
$no-activity-name: 'no_activity';
$no-activity-x: 0rem;
$no-activity-y: 0rem;
$no-activity-offset-x: 0rem;
$no-activity-offset-y: 0rem;
$no-activity-width: 2.26rem;
$no-activity-height: 2.04rem;
$no-activity-total-width: 2.68rem;
$no-activity-total-height: 2.04rem;
$no-activity-image: '../../../sprite.png';
$no-activity: (0rem, 0rem, 0rem, 0rem, 2.26rem, 2.04rem, 2.68rem, 2.04rem, '../../../sprite.png', 'no_activity', );
$spritesheet-width: 2.68rem;
$spritesheet-height: 2.04rem;
$spritesheet-image: '../../../sprite.png';
$spritesheet-sprites: ($level, $money, $no-activity, );
$spritesheet: (2.68rem, 2.04rem, '../../../sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
